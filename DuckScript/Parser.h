#pragma once
#include <iostream>
#include <optional>
#include <string>
#include "Dictionary.h"

class Parser
{
	private:
		template <typename T>
		struct Var
		{
			private:
				T value;
				Var(T init) : value(init) {}
		};
	public:
		Parser();
		void parse(const std::vector<std::string> & lines);

		enum struct COMMANDS
		{
			IF,
			END_IF,
			ELSE,
			WHILE,
			END_WHILE,
			DELAY,
			STRING,
			STRINGLN,
			REM,
			WAIT_FOR_BUTTON_PRESS,
			BUTTON_DEF,
			END_BUTTON,
			DISABLE_BUTTON,
			ENABLE_BUTTON,
			LED_OFF,
			LED_ON,
			LED_R,
			LED_G,
			ATTACKMODE,
			SAVE_ATTACKMODE,
			RESTORE_ATTACKMODE,
			DEFINE,
			VAR,
			FUNCTION,
			END_FUNCTION,
			RETURN,
			RANDOM_LOWERCASE_LETTER,
			RANDOM_UPPERCASE_LETTER,
			RANDOM_LETTER,
			RANDOM_NUMBER,
			RANDOM_SPECIAL,
			RANDOM_CHAR,
			HOLD,
			RELEASE,
			RESTART_PAYLOAD,
			STOP_PAYLOAD,
			RESET,
			HIDE_PAYLOAD,
			RESTORE_PAYLOAD,
			WAIT_FOR_CAPS_ON,
			WAIT_FOR_CAPS_OFF,
			WAIT_FOR_CAPS_CHANGE,
			WAIT_FOR_NUM_ON,
			WAIT_FOR_NUM_OFF,
			WAIT_FOR_NUM_CHANGE,
			WAIT_FOR_SCROLL_ON,
			WAIT_FOR_SCROLL_OFF,
			WAIT_FOR_SCROLL_CHANGE,
			SAVE_HOST_KEYBOARD_LOCK_STATE,
			RESTORE_HOST_KEYBOARD_LOCK_STATE,
			EXFIL,
		};

		enum struct OPERATORS
		{
			PLUS,
			MINUS,
			MULTIPLY,
			DIVIDE,
			EQUALS,
			NOT_EQUALS,
			GREATER_THAN,
			LESS_THAN,
			GREATER_THAN_OR_EQUAL,
			LESS_THAN_OR_EQUAL,
			OR,
			AND,
			ASSIGN,
			BITWISE_AND,
			BITWISE_OR,
			BITWISE_RIGHT,
			BITWISE_LEFT,
		};


		

		enum struct RESERVED_VARS
		{
			$_BUTTON_USER_DEFINED,
			$_BUTTON_PUSH_RECEIVED,
			$_BUTTON_TIMEOUT,
			$_SYSTEM_LEDS_ENABLED,
			$_STORAGE_LEDS_ENABLED,
			$_LED_CONTINUOUS_SHOW_STORAGE_ACTIVITY,
			$_STORAGE_ACTIVITY_TIMEOUT,
			$_INJECTING_LEDS_ENABLED,
			$_EXFIL_LEDS_ENABLED,
			$_LED_SHOW_CAPS,
			$_LED_SHOW_NUM,
			$_LED_SHOW_SCROLL,
			$_CURRENT_VID,
			$_CURRENT_PID,
			$_CURRENT_ATTACKMODE,
			$_RANDOM_INT,
			$_RANDOM_MIN,
			$_RANDOM_MAX,
			$_RANDOM_SEED,
			$_JITTER_ENABLED,
			$_JITTER_MAX,
			$_CAPSLOCK_ON,
			$_NUMLOCK_ON,
			$_SCROLLLOCK_ON,
			$_SAVED_CAPSLOCK_ON,
			$_SAVED_NUMLOCK_ON,
			$_SAVED_SCROLLLOCK_ON,
			$_RECEIVED_HOST_LOCK_LED_REPLY,
			$_EXFIL_MODE_ENABLED,
			$_HOST_CONFIGURATION_REQUEST_COUNT,
			$_OS
		};

		enum struct KEYS
		{
			INJECT_MOD,
			ENTER,
			ESCAPE,
			PAUSE, BREAK,
			PRINTSCREEN,
			MENU, APP,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F0, F11, F12,
			UPARROW, DOWNARROW, LEFTARROW, RIGHTARROW,
			PAGEUP, PAGEDOWN, HOME, END,
			INSERT, DELETE, BACKSPACE,
			TAB,
			SPACE,
			SHIFT,
			ALT,
			CONTROL, CTRL,
			COMMAND,
			WINDOWS, GUI,
			CAPSLOCK,
			NUMLOCK,
			SCROLLLOCK
		};

		enum struct ATTACKMODE_MODIFIERS
		{
			HID,
			STORAGE,
			HID_STORAGE,
			OFF,
			VID_,
			VID_RANDOM,
			PID_,
			PID_RANDOM,
			MAN_,
			MAN_RANDOM,
			PROD_,
			PROD_RANDOM,
			SERIAL_,
			SERIAL_RANDOM
		};

		const Dictionary<std::string, KEYS> keysLookup
		{
			{ "INJECT_MOD", KEYS::INJECT_MOD },
			{ "ENTER", KEYS::ENTER },
			{ "ESCAPE", KEYS::ESCAPE },
			{ "PAUSE", KEYS::PAUSE },
			{ "BREAK", KEYS::BREAK },
			{ "PRINTSCREEN", KEYS::PRINTSCREEN },
			{ "MENU", KEYS::MENU },
			{ "APP", KEYS::APP },
			{ "F1", KEYS::F1 },
			{ "F2", KEYS::F2 },
			{ "F3", KEYS::F3 },
			{ "F4", KEYS::F4 },
			{ "F5", KEYS::F5 },
			{ "F6", KEYS::F6 },
			{ "F7", KEYS::F7 },
			{ "F8", KEYS::F8 },
			{ "F9", KEYS::F9 },
			{ "F0", KEYS::F0 },
			{ "F11", KEYS::F11 },
			{ "F12", KEYS::F12 },
			{ "UPARROW", KEYS::UPARROW },
			{ "DOWNARROW", KEYS::DOWNARROW },
			{ "LEFTARROW", KEYS::LEFTARROW },
			{ "RIGHTARROW", KEYS::RIGHTARROW },
			{ "PAGEUP", KEYS::PAGEUP },
			{ "PAGEDOWN", KEYS::PAGEDOWN },
			{ "HOME", KEYS::HOME },
			{ "END", KEYS::END },
			{ "INSERT", KEYS::INSERT },
			{ "DELETE", KEYS::DELETE },
			{ "BACKSPACE", KEYS::BACKSPACE },
			{ "TAB", KEYS::TAB },
			{ "SPACE", KEYS::SPACE },
			{ "SHIFT", KEYS::SHIFT },
			{ "ALT", KEYS::ALT },
			{ "CONTROL", KEYS::CONTROL },
			{ "CTRL", KEYS::CTRL },
			{ "COMMAND", KEYS::COMMAND },
			{ "WINDOWS", KEYS::WINDOWS },
			{ "GUI", KEYS::GUI },
			{ "CAPSLOCK", KEYS::CAPSLOCK },
			{ "NUMLOCK", KEYS::NUMLOCK },
			{ "SCROLLLOCK", KEYS::SCROLLLOCK }
		};
	
		const Dictionary<std::string, COMMANDS> commandsLookup
		{
			{ "IF", COMMANDS::IF },
			{ "END_IF", COMMANDS::END_IF },
			{ "ELSE", COMMANDS::ELSE },
			{ "WHILE", COMMANDS::WHILE },
			{ "END_WHILE", COMMANDS::END_WHILE },
			{ "DELAY", COMMANDS::DELAY },
			{ "STRING", COMMANDS::STRING },
			{ "STRINGLN", COMMANDS::STRINGLN },
			{ "REM", COMMANDS::REM },
			{ "WAIT_FOR_BUTTON_PRESS", COMMANDS::WAIT_FOR_BUTTON_PRESS },
			{ "BUTTON_DEF", COMMANDS::BUTTON_DEF },
			{ "END_BUTTON", COMMANDS::END_BUTTON },
			{ "DISABLE_BUTTON", COMMANDS::DISABLE_BUTTON },
			{ "ENABLE_BUTTON", COMMANDS::ENABLE_BUTTON },
			{ "LED_OFF", COMMANDS::LED_OFF },
			{ "LED_ON", COMMANDS::LED_ON },
			{ "LED_R", COMMANDS::LED_R },
			{ "LED_G", COMMANDS::LED_G },
			{ "ATTACKMODE", COMMANDS::ATTACKMODE },
			{ "SAVE_ATTACKMODE", COMMANDS::SAVE_ATTACKMODE },
			{ "RESTORE_ATTACKMODE", COMMANDS::RESTORE_ATTACKMODE },
			{ "DEFINE", COMMANDS::DEFINE },
			{ "VAR", COMMANDS::VAR },
			{ "FUNCTION", COMMANDS::FUNCTION },
			{ "END_FUNCTION", COMMANDS::END_FUNCTION },
			{ "RETURN", COMMANDS::RETURN },
			{ "RANDOM_LOWERCASE_LETTER", COMMANDS::RANDOM_LOWERCASE_LETTER },
			{ "RANDOM_UPPERCASE_LETTER", COMMANDS::RANDOM_UPPERCASE_LETTER },
			{ "RANDOM_LETTER", COMMANDS::RANDOM_LETTER },
			{ "RANDOM_NUMBER", COMMANDS::RANDOM_NUMBER },
			{ "RANDOM_SPECIAL", COMMANDS::RANDOM_SPECIAL },
			{ "RANDOM_CHAR", COMMANDS::RANDOM_CHAR },
			{ "HOLD", COMMANDS::HOLD },
			{ "RELEASE", COMMANDS::RELEASE },
			{ "RESTART_PAYLOAD", COMMANDS::RESTART_PAYLOAD },
			{ "STOP_PAYLOAD", COMMANDS::STOP_PAYLOAD },
			{ "RESET", COMMANDS::RESET },
			{ "HIDE_PAYLOAD", COMMANDS::HIDE_PAYLOAD },
			{ "RESTORE_PAYLOAD", COMMANDS::RESTORE_PAYLOAD },
			{ "WAIT_FOR_CAPS_ON", COMMANDS::WAIT_FOR_CAPS_ON },
			{ "WAIT_FOR_CAPS_OFF", COMMANDS::WAIT_FOR_CAPS_OFF },
			{ "WAIT_FOR_CAPS_CHANGE", COMMANDS::WAIT_FOR_CAPS_CHANGE },
			{ "WAIT_FOR_NUM_ON", COMMANDS::WAIT_FOR_NUM_ON },
			{ "WAIT_FOR_NUM_OFF", COMMANDS::WAIT_FOR_NUM_OFF },
			{ "WAIT_FOR_NUM_CHANGE", COMMANDS::WAIT_FOR_NUM_CHANGE },
			{ "WAIT_FOR_SCROLL_ON", COMMANDS::WAIT_FOR_SCROLL_ON },
			{ "WAIT_FOR_SCROLL_OFF", COMMANDS::WAIT_FOR_SCROLL_OFF },
			{ "WAIT_FOR_SCROLL_CHANGE", COMMANDS::WAIT_FOR_SCROLL_CHANGE },
			{ "SAVE_HOST_KEYBOARD_LOCK_STATE", COMMANDS::SAVE_HOST_KEYBOARD_LOCK_STATE },
			{ "RESTORE_HOST_KEYBOARD_LOCK_STATE", COMMANDS::RESTORE_HOST_KEYBOARD_LOCK_STATE },
			{ "EXFIL,", COMMANDS::EXFIL, }
		};

		const Dictionary<std::string, ATTACKMODE_MODIFIERS> attackmodeModifiersLookup
		{
			{ "HID", ATTACKMODE_MODIFIERS::HID },
			{ "STORAGE", ATTACKMODE_MODIFIERS::STORAGE },
			{ "HID_STORAGE", ATTACKMODE_MODIFIERS::HID_STORAGE },
			{ "OFF", ATTACKMODE_MODIFIERS::OFF },
			{ "VID_", ATTACKMODE_MODIFIERS::VID_ },
			{ "VID_RANDOM", ATTACKMODE_MODIFIERS::VID_RANDOM },
			{ "PID_", ATTACKMODE_MODIFIERS::PID_ },
			{ "PID_RANDOM", ATTACKMODE_MODIFIERS::PID_RANDOM },
			{ "MAN_", ATTACKMODE_MODIFIERS::MAN_ },
			{ "MAN_RANDOM", ATTACKMODE_MODIFIERS::MAN_RANDOM },
			{ "PROD_", ATTACKMODE_MODIFIERS::PROD_ },
			{ "PROD_RANDOM", ATTACKMODE_MODIFIERS::PROD_RANDOM },
			{ "SERIAL_", ATTACKMODE_MODIFIERS::SERIAL_ },
			{ "SERIAL_RANDOM", ATTACKMODE_MODIFIERS::SERIAL_RANDOM }		
		};

		const Dictionary<std::string, OPERATORS> operatorsLookup
		{
			{ "+", OPERATORS::PLUS },
			{ "-", OPERATORS::MINUS },
			{ "*", OPERATORS::MULTIPLY },
			{ "/", OPERATORS::DIVIDE },
			{ "==", OPERATORS::EQUALS },
			{ "!=", OPERATORS::NOT_EQUALS },
			{ ">", OPERATORS::GREATER_THAN },
			{ "<", OPERATORS::LESS_THAN },
			{ ">=", OPERATORS::GREATER_THAN_OR_EQUAL },
			{ "<=", OPERATORS::LESS_THAN_OR_EQUAL },
			{ "||", OPERATORS::OR },
			{ "&&", OPERATORS::AND },
			{ "=", OPERATORS::ASSIGN },
			{ "&", OPERATORS::BITWISE_AND },
			{ "|", OPERATORS::BITWISE_OR },
			{ ">>", OPERATORS::BITWISE_RIGHT },
			{ "<<", OPERATORS::BITWISE_LEFT },
		};

		const Dictionary<std::string, RESERVED_VARS> reservedVarsLookup
		{
			{ "$_BUTTON_USER_DEFINED", RESERVED_VARS::$_BUTTON_USER_DEFINED },
			{ "$_BUTTON_PUSH_RECEIVED", RESERVED_VARS::$_BUTTON_PUSH_RECEIVED },
			{ "$_BUTTON_TIMEOUT", RESERVED_VARS::$_BUTTON_TIMEOUT },
			{ "$_SYSTEM_LEDS_ENABLED", RESERVED_VARS::$_SYSTEM_LEDS_ENABLED },
			{ "$_STORAGE_LEDS_ENABLED", RESERVED_VARS::$_STORAGE_LEDS_ENABLED },
			{ "$_LED_CONTINUOUS_SHOW_STORAGE_ACTIVITY", RESERVED_VARS::$_LED_CONTINUOUS_SHOW_STORAGE_ACTIVITY },
			{ "$_STORAGE_ACTIVITY_TIMEOUT", RESERVED_VARS::$_STORAGE_ACTIVITY_TIMEOUT },
			{ "$_INJECTING_LEDS_ENABLED", RESERVED_VARS::$_INJECTING_LEDS_ENABLED },
			{ "$_EXFIL_LEDS_ENABLED", RESERVED_VARS::$_EXFIL_LEDS_ENABLED },
			{ "$_LED_SHOW_CAPS", RESERVED_VARS::$_LED_SHOW_CAPS },
			{ "$_LED_SHOW_NUM", RESERVED_VARS::$_LED_SHOW_NUM },
			{ "$_LED_SHOW_SCROLL", RESERVED_VARS::$_LED_SHOW_SCROLL },
			{ "$_CURRENT_VID", RESERVED_VARS::$_CURRENT_VID },
			{ "$_CURRENT_PID", RESERVED_VARS::$_CURRENT_PID },
			{ "$_CURRENT_ATTACKMODE", RESERVED_VARS::$_CURRENT_ATTACKMODE },
			{ "$_RANDOM_INT", RESERVED_VARS::$_RANDOM_INT },
			{ "$_RANDOM_MIN", RESERVED_VARS::$_RANDOM_MIN },
			{ "$_RANDOM_MAX", RESERVED_VARS::$_RANDOM_MAX },
			{ "$_RANDOM_SEED", RESERVED_VARS::$_RANDOM_SEED },
			{ "$_JITTER_ENABLED", RESERVED_VARS::$_JITTER_ENABLED },
			{ "$_JITTER_MAX", RESERVED_VARS::$_JITTER_MAX },
			{ "$_CAPSLOCK_ON", RESERVED_VARS::$_CAPSLOCK_ON },
			{ "$_NUMLOCK_ON", RESERVED_VARS::$_NUMLOCK_ON },
			{ "$_SCROLLLOCK_ON", RESERVED_VARS::$_SCROLLLOCK_ON },
			{ "$_SAVED_CAPSLOCK_ON", RESERVED_VARS::$_SAVED_CAPSLOCK_ON },
			{ "$_SAVED_NUMLOCK_ON", RESERVED_VARS::$_SAVED_NUMLOCK_ON },
			{ "$_SAVED_SCROLLLOCK_ON", RESERVED_VARS::$_SAVED_SCROLLLOCK_ON },
			{ "$_RECEIVED_HOST_LOCK_LED_REPLY", RESERVED_VARS::$_RECEIVED_HOST_LOCK_LED_REPLY },
			{ "$_EXFIL_MODE_ENABLED", RESERVED_VARS::$_EXFIL_MODE_ENABLED },
			{ "$_HOST_CONFIGURATION_REQUEST_COUNT", RESERVED_VARS::$_HOST_CONFIGURATION_REQUEST_COUNT },
			{ "$_OS", RESERVED_VARS::$_OS }
		};
	
		std::optional<COMMANDS> getCommand(const std::string& str);
		std::optional<OPERATORS> getOperator(const std::string& str);
		std::optional<KEYS> getKey(const std::string& str);
};